{"version":3,"sources":["myFirebase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Nweet","nweetObj","isOwner","editing","setEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","alt","faTrash","faPencilAlt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishiedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","marginTop","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","length","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","getMyNweets","where","orderBy","get","updateProfile","evnet","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setIsLoggedIn","setUserObj","onAuthStateChanged","user","args","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80d02593.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\n\r\nexport const dbService = firebase.firestore();\r\n\r\nexport const storageService = firebase.storage();","import { authService } from \"myFirebase\";\r\nimport React from \"react\";\r\nimport { useState } from \"react/cjs/react.development\";\r\n\r\nconst AuthForm = () => {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [newAccount, setNewAccount] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n\r\n    const onChange = (event) => {\r\n        const {target: {name, value}} = event;\r\n        if(name === \"email\") {\r\n            setEmail(value);\r\n        } else if(name === \"password\") {\r\n            setPassword(value);\r\n        }\r\n    }\r\n\r\n\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        try {\r\n            let data;\r\n            if(newAccount) {\r\n                // Create New Account\r\n                data = await authService.createUserWithEmailAndPassword(email, password);\r\n            } else {\r\n                // Log In\r\n                data = await authService.signInWithEmailAndPassword(email, password);\r\n            }\r\n            console.log(data);\r\n        } catch(error) {\r\n            setError(error.message);\r\n        }\r\n    }\r\n\r\n    // 회원가입 or 로그인 토글\r\n    const toggleAccount = () => {\r\n        setNewAccount((prev) => !prev);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={onSubmit} className=\"container\">\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"Email\" \r\n                    required \r\n                    value={email} \r\n                    name=\"email\"\r\n                    onChange={onChange}\r\n                    className=\"authInput\"\r\n                />\r\n                <input \r\n                    type=\"password\" \r\n                    placeholder=\"Password\" \r\n                    required \r\n                    value={password}\r\n                    name=\"password\"\r\n                    onChange={onChange}\r\n                    className=\"authInput\"\r\n                />\r\n                <input \r\n                    type=\"submit\" \r\n                    value={newAccount ? \"Create Account\" : \"LogIn\"} \r\n                    className=\"authInput authSubmit\"    \r\n                />\r\n                {error && <span className=\"authError\">{error}</span>}\r\n            </form>\r\n                <span onClick={toggleAccount} className=\"authSwitch\">\r\n                    {newAccount ? \"Login\" : \"Create Account\"}\r\n                </span>\r\n            </>\r\n    );\r\n\r\n}\r\n\r\nexport default AuthForm;\r\n","import AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"myFirebase\";\r\nimport React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\n\r\nconst Auth = () => {\r\n    \r\n    \r\n    // 소셜 로그인 기능\r\n    const onSocialClick = async(event) => {\r\n      \r\n        let provider;\r\n        const {target:{name}} = event;\r\n\r\n        if(name ===\"google\") {\r\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n        } else if(name === \"github\") {\r\n            provider = new firebaseInstance.auth.GithubAuthProvider();\r\n        }\r\n\r\n        const data = await authService.signInWithPopup(provider);\r\n\r\n        console.log(data);\r\n    }\r\n\r\n    return (\r\n        <div className=\"authContainer\">\r\n            <FontAwesomeIcon\r\n                icon={faTwitter}\r\n                color={\"#04AAFF\"}\r\n                size=\"3x\"\r\n                style={{ marginBottom: 30 }}\r\n            />\r\n            <AuthForm />\r\n            <div className=\"authBtns\">\r\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\r\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n                </button>\r\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\r\n                    Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );    \r\n}\r\n\r\n\r\nexport default Auth;","import { dbService, storageService } from \"myFirebase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nweet = ({nweetObj, isOwner}) => {\r\n\r\n    const [editing, setEditing] = useState(false);\r\n    const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n    const onDeleteClick = async() => {\r\n        const ok = window.confirm(\"Are you sure you want to delete this nweet?\");\r\n        if(ok) {\r\n            // delete nweet\r\n            await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n            // delete photo\r\n            await storageService.refFromURL(nweetObj.attachmentUrl).delete();\r\n        }\r\n    }\r\n\r\n    const toggleEditing = () => {\r\n        setEditing((prev) => !prev);\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        const{target:{value}} = event;\r\n        setNewNweet(value);\r\n    }\r\n\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n            text: newNweet\r\n        });\r\n        setEditing(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"nweet\">\r\n            {editing ? (\r\n                <>\r\n                    <form onSubmit={onSubmit} className=\"container nweetEdit\">\r\n                        <input \r\n                            type=\"text\" \r\n                            placeholder=\"Edit your nweet\" \r\n                            onChange={onChange}\r\n                            value={newNweet} \r\n                            required\r\n                            autoFocus \r\n                            className=\"formInput\"\r\n                        />\r\n                         <input type=\"submit\" value=\"Update Nweet\" className=\"formBtn\" />\r\n                    </form>\r\n                    <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                        Cancel\r\n                    </span>\r\n                </>\r\n            ) : (\r\n                <>\r\n                    <h4>{nweetObj.text}</h4>\r\n                    {nweetObj.attachmentUrl && <img src={nweetObj.attachmentUrl} alt=\"attachmentPic\"/>}\r\n                    {isOwner && (\r\n                        <div className=\"nweet__actions\">\r\n                            <span onClick={onDeleteClick}>\r\n                                <FontAwesomeIcon icon={faTrash} />\r\n                            </span>\r\n                            <span onClick={toggleEditing}>\r\n                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                            </span>\r\n                        </div>\r\n                    )}\r\n                </>      \r\n            )}\r\n                  \r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Nweet;","import { dbService, storageService } from \"myFirebase\";\r\nimport React from \"react\";\r\nimport {useState} from \"react\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst NweetFactory = ({userObj}) => {\r\n\r\n    const [nweet, setNweet] = useState(\"\");\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n\r\n    const onSubmit = async(event) => {\r\n        \r\n        if (nweet === \"\") {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n        \r\n        // 이미지 업로드 추가하기 전 코드 부분\r\n        /*\r\n        await dbService.collection(\"nweets\").add({\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid\r\n        });\r\n        setNweet(\"\");\r\n        */\r\n\r\n        // Logic : 이미지 업로드가 있는지 확인 후, 있다면 그 이미지의 URL을 nweet에 같이 첨부\r\n        // 이미지 URL은 firebase의 storage에 저장!\r\n\r\n        let attachmentUrl = \"\";\r\n\r\n        if(attachment !== \"\") {\r\n            const attachmentRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\r\n            const response = await attachmentRef.putString(attachment, \"data_url\");\r\n            attachmentUrl = await response.ref.getDownloadURL();\r\n        }\r\n\r\n        const nweetObj = {\r\n            text: nweet,\r\n            createdAt: Date.now(),\r\n            creatorId: userObj.uid,\r\n            attachmentUrl\r\n        }\r\n\r\n        await dbService.collection(\"nweets\").add(nweetObj);\r\n        setNweet(\"\");\r\n        setAttachment(\"\");\r\n\r\n    }\r\n\r\n\r\n    const onChange = (event) => {\r\n        const {target:{value}} = event;\r\n        setNweet(value);\r\n    }\r\n\r\n\r\n    const onFileChange = (event) => {\r\n        const {target:{files}} = event;\r\n        const theFile = files[0];\r\n        console.log(theFile);\r\n        const reader = new FileReader();\r\n        reader.onloadend = (finishiedEvent) => {\r\n            console.log(finishiedEvent);\r\n            const {currentTarget: {result}} = finishiedEvent;\r\n            setAttachment(result);\r\n        }\r\n        reader.readAsDataURL(theFile);\r\n    }\r\n\r\n\r\n    const onClearAttachment = () => {\r\n        setAttachment(\"\");\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={onSubmit} className=\"factoryForm\">\r\n            <div className=\"factoryInput__container\">\r\n                <input\r\n                className=\"factoryInput__input\"\r\n                value={nweet}\r\n                onChange={onChange}\r\n                type=\"text\"\r\n                placeholder=\"What's on your mind?\"\r\n                maxLength={120}\r\n                />\r\n                <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n            </div>\r\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\r\n                <span>Add photos</span>\r\n                <FontAwesomeIcon icon={faPlus} />\r\n            </label>\r\n            <input\r\n                id=\"attach-file\"\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={onFileChange}\r\n                style={{\r\n                    opacity: 0,\r\n                }}\r\n            />\r\n            {attachment && (\r\n                <div className=\"factoryForm__attachment\">\r\n                <img\r\n                  src={attachment}\r\n                  alt=\"attachmentImage\"\r\n                  style={{\r\n                    backgroundImage: attachment,\r\n                  }}\r\n                />\r\n                <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\r\n                  <span>Remove</span>\r\n                  <FontAwesomeIcon icon={faTimes} />\r\n                </div>\r\n              </div>\r\n            )}\r\n        </form>\r\n    );\r\n\r\n}\r\n\r\nexport default NweetFactory","import Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\nimport { dbService} from \"myFirebase\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\n\r\n\r\nconst Home = ({userObj}) => {\r\n\r\n    const [nweets, setNweets] = useState([]);\r\n    \r\n    \r\n    // 실시간이 아닌, 예전 방식으로 nweets를 가져오는 function\r\n    /*\r\n    const getNweets = async() => {\r\n        \r\n        const dbNweets = await dbService.collection(\"nweets\").get();\r\n        \r\n        dbNweets.forEach(document => {\r\n            const nweetObject = {\r\n                ...document.data(),\r\n                id: document.id\r\n            } \r\n            setNweets((prev) => [nweetObject, ...prev]);\r\n        });\r\n    }\r\n    */\r\n\r\n\r\n    useEffect(() => {\r\n        // getNweets();\r\n        dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n            const nweetArray = snapshot.docs.map(doc => ({\r\n                id:doc.id, \r\n                ...doc.data()\r\n            }));\r\n            setNweets(nweetArray);\r\n        });\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <NweetFactory userObj={userObj}/>\r\n            <div style={{ marginTop: 30 }}>\r\n                {nweets.map((nweet) => ( \r\n                    <Nweet \r\n                        key={nweet.id} \r\n                        nweetObj={nweet}\r\n                        isOwner={nweet.creatorId === userObj.uid}   \r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default Home;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Navigation = ({userObj}) => {\r\n\r\n\r\n\r\n    return (\r\n        <nav>\r\n            <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\r\n                <li>\r\n                <Link to=\"/\" style={{ marginRight: 10 }}>\r\n                    <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\r\n                </Link>\r\n                </li>\r\n                <li>\r\n                <Link\r\n                    to=\"/profile\"\r\n                    style={{\r\n                        marginLeft: 10,\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        alignItems: \"center\",\r\n                        fontSize: 12,\r\n                    }}\r\n                >\r\n                    <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\r\n                        <span style={{ marginTop: 10 }}>\r\n                        {userObj?.displayName?.length ? \r\n                            `${userObj.displayName}'s Profile`\r\n                        : \"Profile\"}\r\n                        </span>\r\n                </Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Navigation;","import { authService, dbService } from \"myFirebase\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport { useState } from \"react/cjs/react.development\";\r\n\r\nconst Profile = ({userObj, refreshUser}) => {\r\n\r\n    const history = useHistory();\r\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n    const onLogOutClick = () => {\r\n        authService.signOut();\r\n        history.push(\"/\");\r\n    }\r\n\r\n    const getMyNweets = async() => {\r\n        const result = await dbService\r\n            .collection(\"nweets\")\r\n            .where(\"creatorId\", \"==\", userObj.uid)\r\n            .orderBy(\"createdAt\")\r\n            .get();\r\n        console.log(result.docs.map(doc => doc.data()));\r\n    }\r\n\r\n    const onChange = (evnet) => {\r\n        const {target: {value}} = evnet;\r\n        setNewDisplayName(value);\r\n    }\r\n\r\n    const onSubmit = async(event) => {\r\n        event.preventDefault();\r\n        \r\n        // 변경사항이 있을 때에만 update를 실시\r\n        if(userObj.displayName !== newDisplayName) {\r\n            await userObj.updateProfile({\r\n                displayName: newDisplayName\r\n            });\r\n            refreshUser();\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        getMyNweets();\r\n    })\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={onSubmit} className=\"profileForm\">\r\n                <input \r\n                    type=\"text\" \r\n                    placeholder=\"Display Name\" \r\n                    onChange={onChange}\r\n                    value={newDisplayName}\r\n                    className=\"formInput\"\r\n                    autoFocus\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Update Profile\"\r\n                    className=\"formBtn\"\r\n                    style={{\r\n                        marginTop: 10,\r\n                    }}\r\n                />\r\n            </form>\r\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n                Log Out\r\n            </span>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\"\r\nimport Navigation from \"components/Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\n/* && => isLoggedIn이 true일 때에만 Navation을 보여준다!*/\r\n\r\nconst AppRouter = ({isLoggedIn, userObj, refreshUser}) => {\r\n\r\n    return (\r\n        <Router>\r\n            {isLoggedIn && <Navigation userObj={userObj}/>}\r\n            <Switch>\r\n                {isLoggedIn ? (\r\n                    <>\r\n                        <div\r\n                            style={{\r\n                                maxWidth: 890,\r\n                                width: \"100%\",\r\n                                margin: \"0 auto\",\r\n                                marginTop: 80,\r\n                                display: \"flex\",\r\n                                justifyContent: \"center\",\r\n                            }}\r\n                        >\r\n                            <Route exact path=\"/\">\r\n                                <Home userObj={userObj} />\r\n                            </Route>\r\n                            <Route exact path=\"/profile\">\r\n                                <Profile userObj={userObj} refreshUser={refreshUser} />\r\n                            </Route>\r\n                        </div> \r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Route exact path=\"/\"><Auth /></Route>\r\n                    </>\r\n                )}\r\n            </Switch>\r\n            <Router>\r\n\r\n            </Router>\r\n        </Router>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default AppRouter;","import { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport {authService} from \"myFirebase\";\n\n\nfunction App() {\n\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user) {\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args)\n        });\n      } else {\n        setIsLoggedIn(false);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  // setUserObj하는 객체가 너무 커서 기존의 객체와 달라졌는지 react가 구분하기 힘들어함\n  // 따라서 react가 rerender하도록 1. Obj의 크기를 줄이거나 2. assign을 통해 유도한다\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args)\n    });\n  }\n\n  return (\n    <>\n      {init ? <AppRouter refreshUser={refreshUser} isLoggedIn={isLoggedIn} userObj={userObj} /> : \"Initialazing...\"}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport \"./styles.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}